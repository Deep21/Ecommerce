package dw.fdb.com.fdbapp.db.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DBCART.
*/
public class DBCartDao extends AbstractDao<DBCart, Long> {

    public static final String TABLENAME = "DBCART";

    /**
     * Properties of entity DBCart.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Id_cart = new Property(1, Integer.class, "id_cart", false, "ID_CART");
        public final static Property Date_upd = new Property(2, String.class, "date_upd", false, "DATE_UPD");
        public final static Property Date_add = new Property(3, String.class, "date_add", false, "DATE_ADD");
    };


    public DBCartDao(DaoConfig config) {
        super(config);
    }
    
    public DBCartDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBCART' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ID_CART' INTEGER," + // 1: id_cart
                "'DATE_UPD' TEXT," + // 2: date_upd
                "'DATE_ADD' TEXT);"); // 3: date_add
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBCART'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBCart entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer id_cart = entity.getId_cart();
        if (id_cart != null) {
            stmt.bindLong(2, id_cart);
        }
 
        String date_upd = entity.getDate_upd();
        if (date_upd != null) {
            stmt.bindString(3, date_upd);
        }
 
        String date_add = entity.getDate_add();
        if (date_add != null) {
            stmt.bindString(4, date_add);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBCart readEntity(Cursor cursor, int offset) {
        DBCart entity = new DBCart( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // id_cart
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date_upd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // date_add
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBCart entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_cart(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setDate_upd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate_add(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBCart entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBCart entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
