package dw.fdb.com.fdbapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CART.
*/
public class CartDao extends AbstractDao<Cart, Long> {

    public static final String TABLENAME = "CART";

    /**
     * Properties of entity Cart.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Libelle_produit = new Property(1, String.class, "libelle_produit", false, "LIBELLE_PRODUIT");
        public final static Property Description_short = new Property(2, String.class, "description_short", false, "DESCRIPTION_SHORT");
        public final static Property Description_longue = new Property(3, String.class, "description_longue", false, "DESCRIPTION_LONGUE");
        public final static Property Image_url = new Property(4, String.class, "image_url", false, "IMAGE_URL");
        public final static Property Qte = new Property(5, Integer.class, "qte", false, "QTE");
        public final static Property Prix_ttc = new Property(6, Double.class, "prix_ttc", false, "PRIX_TTC");
        public final static Property Date_upd = new Property(7, java.util.Date.class, "date_upd", false, "DATE_UPD");
        public final static Property Date_add = new Property(8, java.util.Date.class, "date_add", false, "DATE_ADD");
    };


    public CartDao(DaoConfig config) {
        super(config);
    }
    
    public CartDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CART' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'LIBELLE_PRODUIT' TEXT NOT NULL ," + // 1: libelle_produit
                "'DESCRIPTION_SHORT' TEXT," + // 2: description_short
                "'DESCRIPTION_LONGUE' TEXT," + // 3: description_longue
                "'IMAGE_URL' TEXT," + // 4: image_url
                "'QTE' INTEGER," + // 5: qte
                "'PRIX_TTC' REAL," + // 6: prix_ttc
                "'DATE_UPD' INTEGER," + // 7: date_upd
                "'DATE_ADD' INTEGER);"); // 8: date_add
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CART'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Cart entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getLibelle_produit());
 
        String description_short = entity.getDescription_short();
        if (description_short != null) {
            stmt.bindString(3, description_short);
        }
 
        String description_longue = entity.getDescription_longue();
        if (description_longue != null) {
            stmt.bindString(4, description_longue);
        }
 
        String image_url = entity.getImage_url();
        if (image_url != null) {
            stmt.bindString(5, image_url);
        }
 
        Integer qte = entity.getQte();
        if (qte != null) {
            stmt.bindLong(6, qte);
        }
 
        Double prix_ttc = entity.getPrix_ttc();
        if (prix_ttc != null) {
            stmt.bindDouble(7, prix_ttc);
        }
 
        java.util.Date date_upd = entity.getDate_upd();
        if (date_upd != null) {
            stmt.bindLong(8, date_upd.getTime());
        }
 
        java.util.Date date_add = entity.getDate_add();
        if (date_add != null) {
            stmt.bindLong(9, date_add.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Cart readEntity(Cursor cursor, int offset) {
        Cart entity = new Cart( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // libelle_produit
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description_short
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description_longue
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // image_url
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // qte
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // prix_ttc
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // date_upd
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)) // date_add
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Cart entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLibelle_produit(cursor.getString(offset + 1));
        entity.setDescription_short(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription_longue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImage_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQte(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setPrix_ttc(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setDate_upd(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setDate_add(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Cart entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Cart entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
